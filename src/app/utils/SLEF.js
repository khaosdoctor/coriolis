import { HardpointSizeToString } from "../shipyard/Constants.js";
import {
  CORE_INTERNAL_NAME_MAPPING,
  CORIOLIS_TO_FD_BULKHEAD_NAME_MAPPING,
  HARDPOINT_NUM_TO_CLASS,
  SHIP_FD_NAME_TO_CORIOLIS_NAME,
} from "./CompanionApiUtils.js";

/**
 * @typedef {Object} InternalDataReferences References for internal data, extra information
 * @property {string} name Website name
 * @property {string} url Loadout URL
 * @property {string} code Loadout code
 * @property {import('./CompanionApiUtils.js').EDShipName} shipId Internal ship ID
 */
/**
 * @typedef {Object} ShipStats Loadout stats
 * @property {number} class Class rating of the ship
 * @property {number} hullCost Base cost of the hull (no modules)
 * @property {number} speed Normal cruise speed (m/s)
 * @property {number} boost Boosted speed (m/s)
 * @property {number} boostEnergy Energy consumed per boost
 * @property {number} boostInt Boost recharge interval (seconds)
 * @property {number} baseShieldStrength Shield strength without boosters or engineering
 * @property {number} baseArmour Armour value without any reinforcements
 * @property {number} heatCapacity Heat dissipation threshold before overheating
 * @property {number} hardness Resistance to damage from smaller weapons
 * @property {number} hullMass Base mass of the ship's hull (tons)
 * @property {number} masslock Mass lock factor (affects escape from stations and interdictions)
 * @property {number} pipSpeed Energy recharge rate per pip (per second)
 * @property {number} fighterHangars Number of fighter bays equipped
 * @property {number} pitch Pitch rotation speed (degrees/sec)
 * @property {number} roll Roll rotation speed (degrees/sec)
 * @property {number} yaw Yaw rotation speed (degrees/sec)
 * @property {number} crew Maximum number of crew seats
 * @property {number} reserveFuelCapacity Backup fuel reserve capacity (tons)
 * @property {number} moduleCostMultiplier Modifier for outfitting cost
 * @property {number} fuelCapacity Maximum fuel tank capacity (tons)
 * @property {number} cargoCapacity Maximum cargo capacity (tons)
 * @property {number} passengerCapacity Passenger cabin capacity
 * @property {number} ladenMass Total mass when fully loaded (tons)
 * @property {number} armour Final armour value including reinforcements
 * @property {number} shield Final shield value including boosters
 * @property {number} shieldCells Number of shield cell banks equipped
 * @property {number} totalCost Total cost including hull and modules
 * @property {number} unladenMass Mass of ship with no cargo (tons)
 * @property {number} totalDpe Damage per energy (total)
 * @property {number} totalAbsDpe Absolute damage per energy
 * @property {number} totalExplDpe Explosive damage per energy
 * @property {number} totalKinDpe Kinetic damage per energy
 * @property {number} totalThermDpe Thermal damage per energy
 * @property {number} totalDps Total damage per second
 * @property {number} totalAbsDps Absolute DPS
 * @property {number} totalExplDps Explosive DPS
 * @property {number} totalKinDps Kinetic DPS
 * @property {number} totalThermDps Thermal DPS
 * @property {number} totalSDps Sustained damage per second
 * @property {number} totalAbsSDps Sustained absolute DPS
 * @property {number} totalExplSDps Sustained explosive DPS
 * @property {number} totalKinSDps Sustained kinetic DPS
 * @property {number} totalThermSDps Sustained thermal DPS
 * @property {number} totalEps Energy per second used by weapons
 * @property {number} totalHps Heat per second generated by weapons
 * @property {number} shieldExplRes Shield explosive resistance (0–1)
 * @property {number} shieldKinRes Shield kinetic resistance (0–1)
 * @property {number} shieldThermRes Shield thermal resistance (0–1)
 * @property {number} hullExplRes Hull explosive resistance (0–1)
 * @property {number} hullKinRes Hull kinetic resistance (0–1)
 * @property {number} hullThermRes Hull thermal resistance (0–1)
 * @property {number} powerAvailable Maximum available power from the power plant
 * @property {number} powerRetracted Power draw when hardpoints are retracted
 * @property {number} powerDeployed Power draw when hardpoints are deployed
 * @property {number} unladenRange Jump range when unladen (lightyears)
 * @property {number} fullTankRange Max jump range with full fuel (lightyears)
 * @property {number} ladenRange Jump range when fully loaded (lightyears)
 * @property {number} unladenFastestRange Fastest route range unladen (lightyears)
 * @property {number} ladenFastestRange Fastest route range laden (lightyears)
 * @property {number} maxJumpCount Max jumps possible with full tank
 * @property {number} modulearmour Module reinforcement rating
 * @property {number} moduleprotection Module damage protection rating
 * @property {number} hullCausRes Hull resistance to caustic damage
 * @property {number} topSpeed Max theoretical speed (engineered + boost)
 * @property {number} topBoost Max theoretical boosted speed
 * @property {number} topPitch Max pitch speed with optimal configuration
 * @property {number} topRoll Max roll speed with optimal configuration
 * @property {number} topYaw Max yaw speed with optimal configuration
 */
/**
 * @typedef {Object} ShipComponents
 * @property {StandardComponents} standard Standard ship modules
 * @property {(HardpointComponent|null)[]} hardpoints Array of hardpoint slots (weapons, optional)
 * @property {(UtilityComponent|null)[]} utility Array of utility mounts (e.g. shield boosters)
 * @property {(InternalComponent|null)[]} internal Array of internal modules (e.g. cargo racks, interdictors)
 */
/**
 * @typedef {Object} StandardComponents
 * @property {string} bulkheads Type of bulkhead (e.g., "Lightweight Alloy")
 * @property {BaseComponent} cargoHatch
 * @property {RatedComponent} powerPlant
 * @property {ThrusterComponent} thrusters
 * @property {RatedComponent} frameShiftDrive
 * @property {RatedComponent} lifeSupport
 * @property {RatedComponent} powerDistributor
 * @property {RatedComponent} sensors
 * @property {RatedComponent} fuelTank
 */
/**
 * @typedef {1|2|3|4|5} PowerPriority
 */
/**
 * @typedef {1|2|3|4|5} EngineeringGrade
 */
/**
 * @typedef {1|2|3|4|5|6|7|8} ModuleClass
 */
/**
 * @typedef {"A"|"B"|"C"|"D"|"E"|"F"} ModuleRating
 */
/**
 * @typedef {"Fixed"|"Gimballed"|"Turret"} MountType
 */

/**
 * @typedef {Object} BaseComponent
 * @property {boolean} enabled Whether the component is powered on
 * @property {PowerPriority} priority Power priority (lower means more critical)
 */

/**
 * @typedef {BaseComponent & {
 *   class: ModuleClass,
 *   rating: ModuleRating
 * }} RatedComponent
 */

/**
 * @typedef {RatedComponent & {
 *   modifications?: ModificationValues,
 *   blueprint?: Blueprint
 * }} ThrusterComponent
 */

/**
 * @typedef {Object} HardpointComponent
 * @property {1|2|3|4} class Slot size (e.g., 1, 2, etc.)
 * @property {ModuleRating} rating Grade of the module (e.g., "A", "F")
 * @property {boolean} enabled Whether it's powered on
 * @property {PowerPriority} priority Power priority
 * @property {string} group Weapon group (e.g., "Pulse Laser")
 * @property {MountType} mount Mount type (e.g., "Fixed", "Gimballed")
 * @property {ModificationValues} [modifications] Optional engineering mods
 * @property {Blueprint} [blueprint] Engineering blueprint
 */

/**
 * @typedef {Object} UtilityComponent
 * @property {ModuleClass} class Slot size (e.g., 1, 2, etc.)
 * @property {ModuleRating} rating Grade of the module (e.g., "A", "F")
 * @property {PowerPriority} priority Power priority
 * @property {boolean} enabled Powered on or not
 * @property {string} group Type of utility (e.g., "Shield Booster")
 * @property {ModificationValues} [modifications]
 * @property {Blueprint} [blueprint] Engineering blueprint
 */

/**
 * @typedef {Object} InternalComponent
 * @property {ModuleClass} class Slot size
 * @property {ModuleRating} rating Module rating
 * @property {boolean} enabled Powered on or not
 * @property {PowerPriority} priority Power priority
 * @property {string} group Module group (e.g., "Cargo Rack", "Shield Generator")
 * @property {string} [name] Custom name, if any
 * @property {Blueprint} [blueprint] Engineering blueprint
 */

/**
 * @typedef {Object.<string, number>} ModificationValues
 * A dictionary of modification stat names to their values.
 * Values typically in percent * 10000 (e.g., 2700 = 27%)
 */

/**
 * @typedef {Object} Blueprint
 * @property {string} fdname Internal blueprint ID
 * @property {string} name Display name
 * @property {string[]} modulename Compatible modules
 * @property {EngineeringGrade} grade Final grade applied
 * @property {number} id Unique blueprint ID
 * @property {Object<string, BlueprintGrade>} grades Mapping of grade numbers to grade data
 * @property {BlueprintSpecial} [special] Optional experimental effect
 */

/**
 * @typedef {Object} BlueprintGrade
 * @property {Object.<string, number>} components Materials and their required quantities
 * @property {Object.<string, [number, number]>} features Stat name mapped to a min-max range
 * @property {string} uuid Unique identifier
 */

/**
 * @typedef {Object} BlueprintSpecial
 * @property {string} name Name of the special effect
 * @property {string} description Text description of the effect
 * @property {string} edname Internal special ID
 * @property {string} uuid Unique identifier
 * @property {Object.<string, number>} components Materials used for this special
 */

/**
 * Represents an internal data object (this is an internal loadout)
 * @typedef {Object} InternalData
 * @property {string} name Loadout name
 * @property {import('./CompanionApiUtils.js').CoriolisShipName} ship Ship name
 * @property {InternalDataReferences[]} references References Array
 * @property {ShipComponents} components Loadout components array
 * @property {ShipStats} stats Loadout stats
 */

/**
 * Converts the internal Coriolis representation to SLEF
 * @param {typeof import('../shipyard/Ship.js')} ship Ship class
 * @param {InternalData} internalData Internal JSON data
 */
export function toSLEF(ship, internalData) {
  const dataReference = internalData.references[0];
  const fdShipName = Object.entries(SHIP_FD_NAME_TO_CORIOLIS_NAME).find(
    ([_, coriolisName]) => coriolisName === ship.id,
  )[0];

  const slef = [
    {
      header: {
        appName: dataReference.name ?? "Coriolis.io",
        appVersion: "1.0",
        appURL: dataReference.url ?? "",
        appCustomProperties: {
          ...dataReference,
          shipName: internalData.name,
        },
      },
      data: {
        Ship: fdShipName,
        HullValue: ship.m.discountedCost,
        ModulesValue: ship.totalCost - ship.m.discountedCost,
        UnladenMass: ship.unladenMass,
        CargoCapacity: ship.cargoCapacity,
        FuelCapacity: {
          Main: ship.fuelCapacity,
          Reserve: ship.reserveFuelCapacity,
        },
        Modules: [
          {
            Slot: CORE_INTERNAL_NAME_MAPPING.coriolisToFD.cargoHatch,
            On: true,
            Item: CORE_INTERNAL_NAME_MAPPING.fdToItemName.CargoHatch,
            Priority: 0,
            Value: 0,
          },
          {
            Slot: CORE_INTERNAL_NAME_MAPPING.coriolisToFD.bulkheads,
            On: true,
            Item: `${fdShipName}_${CORIOLIS_TO_FD_BULKHEAD_NAME_MAPPING[ship.bulkheads.m.name]}`,
            Priority: 0,
            Value: ship.bulkheads.discountedCost,
            Engineering: engineeringFromBlueprint(ship.bulkheads.m.blueprint),
          },
          ...ship.standard.map(coreInternalToSLEF),
          ...ship.hardpoints.reduce(hardpointsToSLEF, []),
          ...ship.internal.reduce(optionalInternalToSLEF, []),
        ],
      },
    },
  ];
  return slef
}

/**
 * Converts an internal representation of one hardpoint to SLEF
 * @param {HardpointComponent} hardpoint Single hardpoint
 */
function hardpointsToSLEF(acc, hardpoint) {
  if (!hardpoint.m) return acc;

  const Slot = `${HARDPOINT_NUM_TO_CLASS[hardpoint.maxClass]}Hardpoint${hardpoint.slotIndex}`;
  acc.push({
    Slot,
    On: Boolean(hardpoint.enabled),
    Item: hardpoint.m.symbol,
    Priority: hardpoint.priority,
    Value: hardpoint.discountedCost,
    Engineering: engineeringFromBlueprint(hardpoint.m.blueprint),
  });
  return acc;
}

/**
 * Converts an internal representation of one core internal to SLEF
 * @param {} coreInternal Core internals
 */
function coreInternalToSLEF(coreInternal) {
  let slot =
    CORE_INTERNAL_NAME_MAPPING.coriolisToFD[coreInternal.m.ukName] ??
    coreInternal.m.ukName.replace(" ", "");

  return {
    Slot: slot,
    On: Boolean(coreInternal.enabled),
    Item: coreInternal.m.symbol,
    Priority: coreInternal.priority,
    Value: coreInternal.discountedCost,
    Engineering: engineeringFromBlueprint(coreInternal.m.blueprint),
  };
}

/**
 * Converts an internal representation of one optional internal to SLEF
 * @param {InternalComponent} optionalInternal Optional internal component
 */
function optionalInternalToSLEF(acc, optionalInternal) {
  if (!optionalInternal.m) return acc;

  acc.push({
    Slot: `Slot${optionalInternal.slotIndex.toString().padStart(2, 0)}_Size${optionalInternal.maxClass}`,
    Item: optionalInternal.m.symbol,
    On: Boolean(optionalInternal.enabled),
    Priority: optionalInternal.priority,
    Value: optionalInternal.discountedCost,
    Engineering: engineeringFromBlueprint(optionalInternal.m.blueprint),
  });
  return acc;
}

/**
 * Converts an internal representation of one utility mount to SLEF
 * @param {UtilityComponent} utilityMount Utility internal component
 */
function internalUtilityMountToSLEF(utilityMount) {}

function engineeringFromBlueprint(blueprint) {
  if (!blueprint) return {};
  return {
    BlueprintName: blueprint.fdname,
    Level: blueprint.grade,
    Quality: 1,
    ...(blueprint?.special?.edname
      ? { ExperimentalEffect: blueprint.special.edname }
      : {}),
  };
}
